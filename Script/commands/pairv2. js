
const fs = require("fs-extra");
const axios = require("axios");
const { createCanvas, loadImage, registerFont } = require("canvas");

module.exports.config = {
    name: "pairv2",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "Hakai Bot",
    description: "Advanced pairing with beautiful design",
    commandCategory: "love",
    usages: "",
    cooldowns: 15,
};

async function createPairImage({ avatar1, avatar2, user1Name, user2Name, lovePercentage }) {
    // Create canvas with background
    const canvas = createCanvas(600, 700);
    const ctx = canvas.getContext("2d");

    // Create gradient background
    const gradient = ctx.createLinearGradient(0, 0, 600, 700);
    gradient.addColorStop(0, '#1a1a2e');
    gradient.addColorStop(0.5, '#16213e');
    gradient.addColorStop(1, '#0f3460');
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, 600, 700);

    // Add stars/sparkles
    ctx.fillStyle = '#ffffff';
    for (let i = 0; i < 50; i++) {
        const x = Math.random() * 600;
        const y = Math.random() * 700;
        const size = Math.random() * 2;
        ctx.fillRect(x, y, size, size);
    }

    // Header box
    ctx.fillStyle = 'rgba(255, 255, 255, 0.1)';
    ctx.strokeStyle = '#ffffff';
    ctx.lineWidth = 2;
    ctx.roundRect(50, 30, 500, 60, 15);
    ctx.fill();
    ctx.stroke();

    // Header text
    ctx.fillStyle = '#ffffff';
    ctx.font = 'bold 28px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('‚∏∫ Pair Result ‚∏∫', 300, 70);

    // User greeting
    ctx.font = 'bold 20px Arial';
    ctx.fillStyle = '#FFD700';
    ctx.textAlign = 'left';
    ctx.fillText(`‚ú® Hey ${user1Name}! üóø ‡¶ö‡ßå‡¶ß‡ßÅ‡¶∞‡ßÄ~!`, 70, 130);

    // Soulmate announcement
    ctx.fillStyle = '#FF69B4';
    ctx.fillText(`üíñ Your soulmate is: ${user2Name}!`, 70, 170);

    // Love percentage
    ctx.fillStyle = '#FF4444';
    ctx.fillText(`‚ù§Ô∏è Love Match: ${lovePercentage}%`, 70, 210);

    // Destiny text
    ctx.fillStyle = '#87CEEB';
    ctx.fillText(`üß¨ Destiny brought you two together~`, 70, 250);

    // Load and draw avatars
    try {
        const img1 = await loadImage(avatar1);
        const img2 = await loadImage(avatar2);

        // Create image frame background
        ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
        ctx.roundRect(50, 320, 500, 280, 20);
        ctx.fill();

        // Draw gradient overlay on image area
        const imgGradient = ctx.createLinearGradient(50, 320, 550, 600);
        imgGradient.addColorStop(0, 'rgba(255, 182, 193, 0.3)');
        imgGradient.addColorStop(1, 'rgba(173, 216, 230, 0.3)');
        ctx.fillStyle = imgGradient;
        ctx.roundRect(50, 320, 500, 280, 20);
        ctx.fill();

        // Draw heart in center
        ctx.fillStyle = '#FF1493';
        ctx.font = '40px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('üíï', 300, 470);

        // Draw avatar frames
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(120, 380, 120, 120);
        ctx.fillRect(360, 380, 120, 120);

        // Draw avatars
        ctx.drawImage(img1, 125, 385, 110, 110);
        ctx.drawImage(img2, 365, 385, 110, 110);

        // Add decorative elements
        ctx.fillStyle = '#FFD700';
        ctx.font = '20px Arial';
        ctx.fillText('üå∏', 100, 360);
        ctx.fillText('üå∏', 480, 360);
        ctx.fillText('ü¶ã', 100, 530);
        ctx.fillText('ü¶ã', 480, 530);

    } catch (error) {
        console.error("Error loading images:", error);
        // Fallback if images fail to load
        ctx.fillStyle = '#ffffff';
        ctx.font = '16px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Profile images loading...', 300, 450);
    }

    // Bottom signature
    ctx.fillStyle = '#FFD700';
    ctx.font = 'bold 18px Arial';
    ctx.textAlign = 'center';
    ctx.fillText('‚îî‚îÄ ‚ú®üå¨Ô∏è Hakai üóøüâê ‚ú® ‚îÄ‚îò', 300, 650);

    const path = `${__dirname}/cache/pairv2_result.png`;
    const buffer = canvas.toBuffer("image/png");
    fs.writeFileSync(path, buffer);
    return path;
}

// Helper function to create rounded rectangle
CanvasRenderingContext2D.prototype.roundRect = function (x, y, w, h, r) {
    if (w < 2 * r) r = w / 2;
    if (h < 2 * r) r = h / 2;
    this.beginPath();
    this.moveTo(x + r, y);
    this.arcTo(x + w, y, x + w, y + h, r);
    this.arcTo(x + w, y + h, x, y + h, r);
    this.arcTo(x, y + h, x, y, r);
    this.arcTo(x, y, x + w, y, r);
    this.closePath();
    return this;
}

module.exports.run = async function({ api, event, Users }) {
    const { threadID, messageID, senderID } = event;
    const threadInfo = await api.getThreadInfo(threadID);
    const { participantIDs } = threadInfo;

    // Filter out the sender and the bot
    const potentialPartners = participantIDs.filter(id => id !== senderID && id !== api.getCurrentUserID());

    if (potentialPartners.length < 1) {
        return api.sendMessage("You need more people in this group to find a pair!", threadID, messageID);
    }

    // Randomly choose a partner
    const partnerID = potentialPartners[Math.floor(Math.random() * potentialPartners.length)];
    
    const senderName = await Users.getNameUser(senderID);
    const partnerName = await Users.getNameUser(partnerID);

    const avatar1 = `https://graph.facebook.com/${senderID}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;
    const avatar2 = `https://graph.facebook.com/${partnerID}/picture?width=512&height=512&access_token=6628568379%7Cc1e620fa708a1d5696fb991c1bde5662`;

    const lovePercentage = (Math.random() * (100 - 85) + 85).toFixed(2);

    api.sendMessage("Creating your beautiful pair result... üíñ‚ú®", threadID, messageID);
    
    try {
        const path = await createPairImage({ 
            avatar1, 
            avatar2, 
            user1Name: senderName,
            user2Name: partnerName,
            lovePercentage 
        });

        const msg = {
            body: `üíï Pair Result Generated! üíï\n\n‚ú® ${senderName} √ó ${partnerName} ‚ú®\n‚ù§Ô∏è Love compatibility: ${lovePercentage}%\n\nüåü May your love story be beautiful! üåü`,
            attachment: fs.createReadStream(path)
        };

        api.sendMessage(msg, threadID, () => fs.unlinkSync(path), messageID);
    } catch (error) {
        console.error("Error creating pair image:", error);
        api.sendMessage("‡¶è‡¶ï‡¶ü‡¶ø ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá! ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", threadID, messageID);
    }
};
